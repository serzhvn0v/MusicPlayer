// Generated by view binder compiler. Do not edit!
package com.harshRajpurohit.musicPlayer.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.imageview.ShapeableImageView;
import com.harshRajpurohit.musicPlayer.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivitySettingsBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ShapeableImageView coolBlackTheme;

  @NonNull
  public final ShapeableImageView coolBlueTheme;

  @NonNull
  public final ShapeableImageView coolGreenTheme;

  @NonNull
  public final ShapeableImageView coolPinkTheme;

  @NonNull
  public final ShapeableImageView coolPurpleTheme;

  @NonNull
  public final ShapeableImageView sortBtn;

  @NonNull
  public final TextView versionName;

  private ActivitySettingsBinding(@NonNull LinearLayout rootView,
      @NonNull ShapeableImageView coolBlackTheme, @NonNull ShapeableImageView coolBlueTheme,
      @NonNull ShapeableImageView coolGreenTheme, @NonNull ShapeableImageView coolPinkTheme,
      @NonNull ShapeableImageView coolPurpleTheme, @NonNull ShapeableImageView sortBtn,
      @NonNull TextView versionName) {
    this.rootView = rootView;
    this.coolBlackTheme = coolBlackTheme;
    this.coolBlueTheme = coolBlueTheme;
    this.coolGreenTheme = coolGreenTheme;
    this.coolPinkTheme = coolPinkTheme;
    this.coolPurpleTheme = coolPurpleTheme;
    this.sortBtn = sortBtn;
    this.versionName = versionName;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivitySettingsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivitySettingsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_settings, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivitySettingsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.coolBlackTheme;
      ShapeableImageView coolBlackTheme = ViewBindings.findChildViewById(rootView, id);
      if (coolBlackTheme == null) {
        break missingId;
      }

      id = R.id.coolBlueTheme;
      ShapeableImageView coolBlueTheme = ViewBindings.findChildViewById(rootView, id);
      if (coolBlueTheme == null) {
        break missingId;
      }

      id = R.id.coolGreenTheme;
      ShapeableImageView coolGreenTheme = ViewBindings.findChildViewById(rootView, id);
      if (coolGreenTheme == null) {
        break missingId;
      }

      id = R.id.coolPinkTheme;
      ShapeableImageView coolPinkTheme = ViewBindings.findChildViewById(rootView, id);
      if (coolPinkTheme == null) {
        break missingId;
      }

      id = R.id.coolPurpleTheme;
      ShapeableImageView coolPurpleTheme = ViewBindings.findChildViewById(rootView, id);
      if (coolPurpleTheme == null) {
        break missingId;
      }

      id = R.id.sortBtn;
      ShapeableImageView sortBtn = ViewBindings.findChildViewById(rootView, id);
      if (sortBtn == null) {
        break missingId;
      }

      id = R.id.versionName;
      TextView versionName = ViewBindings.findChildViewById(rootView, id);
      if (versionName == null) {
        break missingId;
      }

      return new ActivitySettingsBinding((LinearLayout) rootView, coolBlackTheme, coolBlueTheme,
          coolGreenTheme, coolPinkTheme, coolPurpleTheme, sortBtn, versionName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
